file <- "figures/rc10_social_anxiety.jpeg"
ggsave(file,
rc10_social_anxiety,
unit = "in",
height = 2.862,
width = 4.319)
#VFT LETTERS
rc11_letters <-matlab_data %>%
#make coordinate system
ggplot(aes(x = factor(dyslexia, level = level_order), y = vft_letters,
fill = dyslexia)) +
#add half violin plots
stat_halfeye(
adjust = 0.5,
justification = -0.2,
.width = 0,
point_colour = NA) +
#add box plots
geom_boxplot(width = 0.12,
outlier.color = NA,
alpha = 0.5) +
#add dots on left side
stat_dots(side = "left",
justification = 1.1,
binwidth = 0.0028,
slab_linewidth = 0.1) +
#visuals
scale_fill_manual(values = col_sch,
name = "Dyslexia",
labels = c("Dyslexia", "No Dyslexia")) +
theme_cognitive() +
labs(y = "Letter Verbal Fluency", x = " ") +
theme(axis.text.y = element_blank()) +
coord_flip()
file <- "figures/rc11_letters.jpeg"
ggsave(file,
rc11_letters,
unit = "in",
height = 2.862,
width = 4.319)
# VFT CATEGORY
rc12_categories <-matlab_data %>%
#make coordinate system
ggplot(aes(x = factor(dyslexia, level = level_order), y = vft_categories,
fill = dyslexia)) +
#add half violin plots
stat_halfeye(
adjust = 0.5,
justification = -0.2,
.width = 0,
point_colour = NA) +
#add box plots
geom_boxplot(width = 0.12,
outlier.color = NA,
alpha = 0.5) +
#add dots on left side
stat_dots(side = "left",
justification = 1.1,
binwidth = 0.0028,
slab_linewidth = 0.1) +
#visuals
scale_fill_manual(values = col_sch,
name = "Dyslexia",
labels = c("Dyslexia", "No Dyslexia")) +
theme_cognitive() +
labs(y = "Category Verbal Fluency", x = " ") +
theme(axis.text.y = element_blank()) +
coord_flip()
file <- "figures/rc12_categories.jpeg"
ggsave(file,
rc12_categories,
unit = "in",
height = 2.862,
width = 4.319)
#define matrix of plot layout
lay <- rbind(c(1,2,3,3),
c(4,5,6,6),
c(7,8,9,9),
c(10,11,12,12))
# rainclouds <- grid.arrange(grobs = list(rc1_social_skills,
#                                         rc2_attention_switching,
#                                         rc3_attention_to_detail,
#                                         rc4_communication,
#                                         rc5_imagination,
#                                         rc6_depression,
#                                         rc7_not_distracting,
#                                         rc8_attention_regulation,
#                                         rc9_trait_anxiety,
#                                         rc10_social_anxiety,
#                                         rc11_letters,
#                                         rc12_categories),
#                            layout_matrix = lay)
file <- "figures/rainclouds.jpeg"
ggsave(file, rainclouds)
#################################### p-values ggpairs ##########################################
#create variable to store p-values in
p_val <- 1:12
#### SOCIAL SKILLS
#run unpaired t-test to investigate effect of dyslexia on social skills
t_test_dep <- t.test(data = matlab_data,
aq_social_skills ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[1] <- format.pval(t_test_dep$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
####ATTENTION SWITCHING
#run unpaired t-test to investigate effect of dyslexia on attention switching
t_test_dist <- t.test(data = matlab_data,
aq_attention_switching ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[2] <- format.pval(t_test_dist$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
####ATTENTION TO DETAIL
#run unpaired t-test to investigate effect of dyslexia on attention to detail
t_test_tanx <- t.test(data = matlab_data,
aq_attention_to_detail ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[3] <- format.pval(t_test_tanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
####COMMUNICATION SKILLS
#run unpaired t-test to investigate effect of dyslexia on communication skills
t_test_sanx <- t.test(data = matlab_data,
aq_communication ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[4] <- format.pval(t_test_sanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
####IMAGINATION
#run unpaired t-test to investigate effect of dyslexia on imagination
t_test_sanx <- t.test(data = matlab_data,
aq_imagination_dimension ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[5] <- format.pval(t_test_sanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
#### DEPRESSION
#run unpaired t-test to investigate effect of dyslexia on depression
t_test_sanx <- t.test(data = matlab_data,
depression_score ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[6] <- format.pval(t_test_sanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
##### NOT DISTRACTING
#run unpaired t-test to investigate effect of dyslexia on not distracting
t_test_sanx <- t.test(data = matlab_data,
maia_not_distracting ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[7] <- format.pval(t_test_sanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
##### ATTENTION REGULATION
#run unpaired t-test to investigate effect of dyslexia on attention regulation
t_test_sanx <- t.test(data = matlab_data,
maia_attention_regulation ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[8] <- format.pval(t_test_sanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
##### TRAIT ANXIETY
#run unpaired t-test to investigate effect of dyslexia on trait anxiety
t_test_sanx <- t.test(data = matlab_data,
trait_anxiety ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[9] <- format.pval(t_test_sanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
##### SOCIAL ANXIETY
#run unpaired t-test to investigate effect of dyslexia on social anxiety
t_test_sanx <- t.test(data = matlab_data,
social_anxiety ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[10] <- format.pval(t_test_sanx$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
##### VERBAL FLUENCY LETTERS
#run unpaired t-test to investigate effect of dyslexia on letter verbal fluency performance
t_test_lvf <- t.test(data = matlab_data,
vft_letters ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[11] <- format.pval(t_test_lvf$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
##### VERBAL FLUENCY CATEGORIES
#run unpaired t-test to investigate effect of dyslexia on category verbal fluency performance
t_test_cvf <- t.test(data = matlab_data,
vft_categories ~ dyslexia,
paired = F,
var.equal = T)
#get p-value in appropriate format and save to p_val
p_val[12] <- format.pval(t_test_cvf$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3) #trail zeros to keep if value has less digits than defined
#calculate the euclidean distance (dist()) and pipe it into the cmdscale function and
#make the output into a tibble
mds <- matlab_data %>%
select(!dyslexia) %>%
dist() %>%
cmdscale() %>%
data.frame()
#add names to the columns
colnames(mds) <- c("Dimension 1", "Dimension 2")
#add the categorical dyslexia variable to colour the data points
mds <- mds %>%
add_column(dyslexia = matlab_data$dyslexia)
#order so that dyslexia group is plotted ontop of no dyslexia group
mds <- mds[order(mds$dyslexia, decreasing=TRUE),]
#plot the 2 dimensions
mds_plot <- mds %>%
ggplot(aes(x = `Dimension 1`, y = `Dimension 2`, color = dyslexia)) +
geom_point(size = 2.5) +
theme_cognitive() +
scale_color_manual(values = col_sch,
name = "Dyslexia",
labels = c("Dyslexia", "No Dyslexia"))
file <- "figures/mds.jpeg"
ggsave(file, mds_plot)
##### distance from origin of mds plot #########
#calculate the distances of each participant to the origin
distances <- mds %>%
mutate(orig_dist = sqrt(`Dimension 1`^2 + `Dimension 2`^2)) %>%
add_column("pp" = 1:nrow(data),
.before = 1)
#order it by the distance from the origin
distances <- distances[order(distances$orig_dist),]
#prevent ordering by participant number
distances$pp <- factor(distances$pp, levels = distances$pp)
#plot the distances from the origin
mds_dist <- ggplot(distances, aes(x = pp, y = orig_dist, fill = dyslexia), group = 1) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme_cognitive() +
ylab("Distance from the origin") +
xlab("Participants") +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = col_sch)
file <- "figures/mds_dist.jpeg"
ggsave(file, mds_dist,
unit = "in",
height = 3,
width = 7)
#t-test on whether groups differ in distance to origin
t_dist <- t.test(data = distances,
orig_dist ~ dyslexia,
paired = F,
var.equal = T)
format.pval(t_dist$p.value,
digits = 2,
eps = 0.001,
nsmall = 3)
#plot the mean distances from the origin for each group
mean_dists <- matrix(c(1,2,3,4,5,6), ncol = 3)
colnames(mean_dists) <- c("dyslexia", "mean_distance", "stdv")
mean_dists <- as_tibble(mean_dists)
mean_dists$mean_distance[1] <- distances$orig_dist[distances$dyslexia == 'dyslexia'] %>%
mean() %>%
round(digits = 2)
mean_dists$mean_distance[2] <- distances$orig_dist[distances$dyslexia == 'no dyslexia'] %>%
mean() %>%
round(digits = 2)
mean_dists$stdv[1] <- distances$orig_dist[distances$dyslexia == 'dyslexia'] %>%
sd() %>%
round(digits = 2)
mean_dists$stdv[2] <- distances$orig_dist[distances$dyslexia == 'no dyslexia'] %>%
sd() %>%
round(digits = 2)
mean_dists$dyslexia[1] <- "dyslexia"
mean_dists$dyslexia[2] <- "no dyslexia"
mean_dists$dyslexia <- as.factor(mean_dists$dyslexia)
mean_dists$stdv <- as.numeric(mean_dists$stdv)
#plot
mds_mean_dist <- mean_dists %>%
ggplot(aes(x = dyslexia, y = mean_distance, fill = dyslexia)) +
geom_bar(stat = "identity", show.legend = FALSE) +
geom_errorbar(aes(ymin = mean_distance - stdv, ymax = mean_distance + stdv), width = .2) +
theme_cognitive() +
scale_fill_manual(values = col_sch) +
xlab(" ") +
ylab("Distance from the origin")
#save plot
file <- "figures/mds_mean_dist.jpeg"
ggsave(file, mds_mean_dist,
unit = "in",
width = 2.2,
height = 4.5)
#compare_means(orig_dist ~ dyslexia, data = distances, method = "t.test")
#plot dyslexia and adhd score against each other for each participant
#colour determined by dyslexia category (whether exceeded cut off or not)
comorb_adhd <- ggplot(data, aes(x = qd_dac, y = qd_adhd, color = dyslexia)) +
geom_point(size = 1.5) +
theme_cognitive() +
theme(text = element_text(size = 10),
axis.text = element_text(size = 8)) +
labs(x = "Dyslexia Score",
y = "ADHD Score") +
scale_color_manual(values = col_sch,
name = "Dyslexia",
labels = c("Dyslexia", "No Dyslexia")) +
geom_vline(xintercept = 45, color = "grey", linetype = "dashed")
file <- "figures/comorb.jpeg"
ggsave(file, comorb_adhd)
# test whether difference significant
#t-test to evaluate whether exceeding cut off in dyslexia impacts ADHD performance
t_dys_adhd <- t.test(qd_adhd ~ dyslexia, data = data)
format.pval(t_dys_adhd$p.value,
digits = 2, #significant figures after 0.0
eps = 0.001, #threshold over which replaces with < than it
nsmall = 3)
################### load in synthesised data ############
## Dist data
file <- "data-raw/data_dist.txt"
data_dist <- read_table(file)
#add group variable to categorise
data_dist <- data_dist %>%
add_column("group" = 1:nrow(data_dist))
data_dist$group[1:40] <- "Group 1"
data_dist$group[41:80] <- "Group 2"
data_dist$group[81:120] <- "Group 3"
## Comorb data
file <- "data-raw/data_comorb.txt"
data_comorb <- read_table(file)
#add group variable to categorise
data_comorb <- data_comorb %>%
add_column("group" = 1:nrow(data_comorb))
data_comorb$group[1:40] <- "Group 1"
data_comorb$group[41:80] <- "Group 2"
data_comorb$group[81:120] <- "Group 3"
## One data
file <- "data-raw/data_one.txt"
data_one <- read_table(file)
#add group variable to categorise
data_one <- data_one %>%
add_column("group" = 1:nrow(data_one))
data_one$group[1:40] <- "Group 1"
data_one$group[41:80] <- "Group 2"
data_one$group[81:120] <- "Group 3"
# colour scheme for synthesised data
synth_colour <- c("#2587be", "#d5bb2a", "#cf1609")
################## PCA #####################
#PCA on dist data
pca <- data_dist %>%
select(!group) %>%
prcomp(scale. = TRUE)
pca_labelled <- data.frame(pca$x, group = data_dist$group)
#plot the first two principle components
pca_labelled %>%
ggplot(aes(x = PC1, y = PC2, color = group)) +
geom_point(size = 2.5) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
#PCA on comorb data
pca <- data_comorb %>%
select(!group) %>%
prcomp(scale. = TRUE)
pca_labelled <- data.frame(pca$x, group = data_comorb$group)
#plot the first two principle components
pca_labelled %>%
ggplot(aes(x = PC1, y = PC2, color = group)) +
geom_point(size = 2.5) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
#PCA on ONE data
pca <- data_one %>%
select(!group) %>%
prcomp(scale. = TRUE)
pca_labelled <- data.frame(pca$x, group = data_one$group)
#plot the first two principle components
pca_labelled %>%
ggplot(aes(x = PC1, y = PC2, color = group)) +
geom_point(size = 2.5) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
################## MDS #####################
# run mds on the DISTINC data
mds <- data_dist %>%
select(!group) %>%
dist() %>%
cmdscale() %>%
data.frame()
#add names to the columns
colnames(mds) <- c("Dimension 1", "Dimension 2")
#add the group variable to colour
mds <- mds %>%
add_column(group = data_dist$group)
#plot the 2 dimensions
mds %>%
ggplot(aes(x = `Dimension 1`, y = `Dimension 2`, color = group)) +
geom_point(size = 1.5) +
theme_cognitive()+
labs(color = "Group") +
scale_color_manual(values = synth_colour)
# run mds on the COMORB data
mds <- data_comorb %>%
select(!group) %>%
dist() %>%
cmdscale() %>%
data.frame()
#add names to the columns
colnames(mds) <- c("Dimension 1", "Dimension 2")
#add the group variable to colour
mds <- mds %>%
add_column(group = data_comorb$group)
#plot the 2 dimensions
mds %>%
ggplot(aes(x = `Dimension 1`, y = `Dimension 2`, color = group)) +
geom_point(size = 1.5) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
# run mds on the ONE data
mds <- data_one %>%
select(!group) %>%
dist() %>%
cmdscale() %>%
data.frame()
#add names to the columns
colnames(mds) <- c("Dimension 1", "Dimension 2")
#add the group variable to colour
mds <- mds %>%
add_column(group = data_one$group)
#plot the 2 dimensions
mds %>%
ggplot(aes(x = `Dimension 1`, y = `Dimension 2`, color = group)) +
geom_point(size = 1.5) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
################## T-SNE ###################
#run the tSNE on DIST data
#exclude group as it is categorical
tsne <- data_dist %>%
select(!group) %>%
Rtsne(perplexity = 30,
check_duplicates = FALSE)
#store tsne data (Y) and group as labels in dat
dat <- data.frame(tsne$Y, type = data_dist$group)
#plot the tsne
dat %>%
ggplot(aes(x = X1, y = X2, colour = type)) +
geom_point(size = 2) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
#run the tSNE on COMORB data
#exclude group as it is categorical
tsne <- data_comorb %>%
select(!group) %>%
Rtsne(perplexity = 30,
check_duplicates = FALSE)
#store tsne data (Y) and group as labels in dat
dat <- data.frame(tsne$Y, type = data_comorb$group)
#plot the tsne
dat %>%
ggplot(aes(x = X1, y = X2, colour = type)) +
geom_point(size = 2) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
#run the tSNE on ONE data
#exclude group as it is categorical
tsne <- data_one %>%
select(!group) %>%
Rtsne(perplexity = 30,
check_duplicates = FALSE)
#store tsne data (Y) and group as labels in dat
dat <- data.frame(tsne$Y, type = data_one$group)
#plot the tsne
dat %>%
ggplot(aes(x = X1, y = X2, colour = type)) +
geom_point(size = 2) +
theme_cognitive() +
labs(color = "Group") +
scale_color_manual(values = synth_colour)
